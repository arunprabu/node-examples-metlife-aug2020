NodeJS
----

Primary Feedback 13th Aug 20 (EOD):- https://www.surveymonkey.com/r/S3J29VS
Mid-session Feedback on 17th Aug 20  (EOD):- https://www.surveymonkey.com/r/S3N6FWF
Mid-session Feedback on 20th Aug 20  (EOD):- https://www.surveymonkey.com/r/S3ZQ697  --- Today
Final Feedback on 24th Aug 20  (EOD):- https://www.surveymonkey.com/r/SG9ZL6X

Github Link:  https://github.com/arunprabu/node-examples-metlife-aug2020
ECMAScript Book Link: https://leanpub.com/understandinges6/read 
RxJS Link: https://www.learnrxjs.io/

===========

Browser
---
  HTML 
  CSS,
  JS ( private, biz logic )


NodeJS
----



Webapps
---
1. Server Side Rendering Apps  - Traditional 
  ( 1 server - Front End + Backend + DB Queries )
    index.php 
    -----
    <%php
      echo '<div>Success</div>'
    %>

    output:
      <div>Success</div> 
      
      
2. Client Side Rendering Apps / Single Page Apps  (Will not refresh ) -- Modern Webapps 
  ( 2 Servers)
  1 Front End Server         (tomcat, apache)             port: 4200
    <div>{{ profile.name  }}</div> 
  
  1 Backend Server (REST API - JSON , NodeJS Http Module )     port: 8080
    {
      profile: {
        name: 'Arun',
        city: 'Chenai'
      }
    }

JavaScript 
----
  Front End, Backend , DB Queries, Mobile Apps, Desktop Apps 

NodeJS
----
  Runtime 


REST API
----
  Java: Springboot
  DotNEt: webAPI 
  NodeJs: ExpressJS 



-----
TypeScript
------
  TS = JS + DataTyping + OOPs (class, extends, import, export )
  Microsoft 


1. Loosely typed lang (JS, PHP, Python)
    var x = 10; 
    x = true; //works 
    x = []; //works 
    x = {}; //works 
    x = 'Arun'; //works 
    x = function(){}  // works 

2. Strictly typed lang (C#, C++, C, JAva )
    String myName = 'Arun';
    myName = true; // compilation error 

3. Optionally typed lang (TS)


=====================

TS with Datatyping  (todo: primitive data types )  -- extn .ts 
---
  
  1. Implicit DataTyping
        var y = 20;  // valid 
        y = true; // error 

  2. Explicit DataTyping
        var x: number = 10;  //valid 
        x = true; // error 

Any
---
var everything: any = 'Arun';
everything = true; 
everything = 42452; 
everything = [];
everything = {
  
}

---
var myArr: any[] = ['html', 'css', 'js', 35456453, true];
var myArr1: Array<any> = ['html', 'css', 'js', 345234, 32453245, true]; 

var obj: {} = {
  name: 'a',
  age: 23
}

====




11-http-demo.js
====
// importing http module to power up the http server
const http = require('http');

// Server side rendering app -- traditional webapp 
http.createServer( ( req, res)=> {

  let templateContent;

  // req url, req method, req body, url params, query params and req header will be part of req object
  console.log(req.url);
  switch(req.url){
    case '/': 
      templateContent = `<h1>Home</h1>`;
      break;
    case '/about':
      templateContent = `<h1>About</h1>`;
      break;
    case '/contact':
      templateContent = `<h1>Contact</h1>`;
      break;
    default: 
      templateContent = `<h1>404 Page Not Found</h1>`;
  }

  res.writeHead(200, {"Content-Type": "text/html"});  
  res.write(`
      <div>
        <link rel="stylesheet" href="https://stackpath.bootstrapcdn.com/bootstrap/4.5.2/css/bootstrap.min.css" integrity="sha384-JcKb8q3iqJ61gNV9KGb8thSsNjpSL0n8PARn9HuZOnIxN0hoP+VmmDGMN5t9UJ0Z" crossorigin="anonymous">
        <header>
          <nav class="navbar navbar-expand-lg navbar-light bg-light">
            <a class="navbar-brand" href="#">My App</a>
            <button class="navbar-toggler" type="button" data-toggle="collapse" data-target="#navbarNavDropdown" aria-controls="navbarNavDropdown" aria-expanded="false" aria-label="Toggle navigation">
              <span class="navbar-toggler-icon"></span>
            </button>
            <div class="collapse navbar-collapse" id="navbarNavDropdown">
              <ul class="navbar-nav">
                <li class="nav-item active">
                  <a class="nav-link" href="/">Home <span class="sr-only">(current)</span></a>
                </li>
                <li class="nav-item">
                  <a class="nav-link" href="/about">About</a>
                </li>
                <li class="nav-item">
                  <a class="nav-link" href="/contact">Contact</a>
                </li>
              </ul>
            </div>
          </nav>
        </header>
        <div class='container'>
          ${templateContent}
        </div>
      </div>
  `);
  res.end();

}).listen('3000', () => {
  console.log('Wow! The server is started. You can access the app in this url http://localhost:3000');
})

=======


NodeJS Ecosystem 
----
    
    fs, events, path, http, 

    packages -- npmjs.com 

    npm i express 
    npm update express
    npm uninstall express 

    Todo: npm prune 
    Todo: Where will global packages be in windows? 
    
    
Dependencies
--
    1. Project Dependencies 
        packages that are required for the app to run in prod env 
        example: bootstrap, jquery, dropzone, datatables 

        "dependencies": {
        }

        npm i bootstrap 
        npm install bootstrap
        npm i bootstrap --save 


    2. Dev Dependencies 
        For better, smoother dev workflow.
        They will never be part of prod build 
        usage: to restart server upon save, ts => js, scss => css 
        example: webpack, gulp, grunt, nodemon, 

        "devDependencies": {

        }

        npm i webpack --save-dev 
        npm i webpack -D 

====

Global Package Installation 
	npm i express-generator -g 



https://expressjs.com/en/starter/generator.html


===
index.pug
===
extends layout

block content
  h1= title
  p Welcome to #{title}
  ul
    li
      a(href='/api/contacts') Contacts API 
    li
      a(href='/api/accounts') Accounts API 
    li
      a(href='/api/reports') Reports API 




===
Install REST API CLIENT 
https://chrome.google.com/webstore/detail/advanced-rest-client/hgmloofddffdnphfgcellkdfbfbjeloo


Auto Restart the server using nodemon 
----
npm i nodemon -g 

go to the project folder and then try the following command 
 nodemon 


MongoDB
---
Document database, No SQL Database
You can work with it thru JS 

MongoDB 
    Has a DB Server
        localhost
        port no: 27017
        credentials may be required 

    DB Clients
        MongoShell / Compass / Robo 3T        


Collection: Users
    {
        fName: 'Arun,
        city: 'hyd'
    }

    {
        lName: 'vj
    }

Querying 
---
    NoSQL Database  (Not only sql) 
    JavaScript 

How Data Saved? 
    data will be stored as object (JSON)
    Internally it will be BSON  (JSON => BSON)
    
Example Documents 
#1
{
    name: 'A'
    city: 'Hyd',
    age: 30,
    skillList: [

    ]    
}

#2
{
    skillList: [

    ]    
}

#3
{
    exp: 23 
}


Cmd Prompt 1  -- Keep it running -- This is MongoDB server 
C:/Program Files/MongoDB/Server/4.4/bin>mongod 

Cmd Prompt 2 -- To work with MongoDB Client tool 
C:/Program Files/MongoDB/Server/4.4/bin>mongo 

MongoDB shell commands 
----
To start the server 
    mongo 

To see the list of dbs 
    show dbs     (the dbs with data inside will only be dipsplayed)

To see currently selected db 
    db 

To create a new db / to use existing db 
    use userDb   

To see collections inside 
    show collections

To create a collection
    db.createCollection('users') 		(users is the collection name ) 
	or try the following also. 
    db.users     (users is the collection name )

To insert a document 
    db.users.insert( { 'name': 'A'})

To list all documents from the collection
    db.users.find()  // will give an array of documents 

To list one collection where the 'name' is 'A' 
    db.users.find( { 'name': 'A'})  // will return array 
    db.users.findOne( { 'name': 'A'})  // will return object 

To update documents where the age is 23
     db.users.update({'age': 23}, { $set: { 'age': 30 } })

Todos: 
    learn about insertOne(), insertMany()
    Learn about findMany()
    Learn about $gt, $lt when querying 
    Learn about findOneAndUpdate(), updateOne(), updateMany()
    learn about dropping the db 
    learn about dropping the collection 
    learn about deleting a document 







======


models/mongo.js
====
var process = require("process");   // node js process 
var mongoose = require("mongoose");  // mongodb driver and orm 

var mongoConfig = require("../config/mongoConfig.json"); // mongo config 

var dbURI = mongoConfig.url;
var dbOptions = mongoConfig.options;

mongoose.connect(dbURI, dbOptions);

// When successfully connected
mongoose.connection.on('connected', function () {  
  console.log('Mongoose default connection open to ' + dbURI);
}); 

// If the connection throws an error
mongoose.connection.on('error',function (err) {  
  console.log('Mongoose default connection error: ' + err);
}); 

// When the connection is disconnected
mongoose.connection.on('disconnected', function () {  
  console.log('Mongoose default connection disconnected'); 
});

// If the Node process ends, close the Mongoose connection 
process.on('SIGINT', function() {  
  mongoose.connection.close(function () { 
    console.log('Mongoose default connection disconnected through app termination'); 
    process.exit(0); 
  }); 
}); 

module.exports = mongoose;


=============

config/mongoConfig.json
===

{
    "url": "mongodb://localhost/contactsDb",
    "options": {}
}




=============

models/contact.js
====
// creating a model for the collection : contact 
var autoIncrement = require('mongoose-auto-increment');

const mongoose = require('./mongo'); //importing connection config

const Schema = mongoose.Schema;

//schema 
var Contact = new Schema({
    // schema definition
    contactId: Number,  // will later become primary key
    fullName: String,
    phoneNo: Number,
    email: String,
    status: String,  // ACTIVE/INACTIVE 
    createdBy: String,
    createdOn: { type: Date, default: Date.now },
    updatedBy: String,
    updatedOn: { type: Date, default: Date.now }
}); 
// todo: strict schema 

// to set primary key
Contact.plugin(autoIncrement.plugin, {model: 'Contact', field: 'contactId', startAt: 1});

module.exports = mongoose.model('Contact', Contact);


=====
File upload 
----

https://medium.com/@nitinpatel_20236/image-upload-via-nodejs-server-3fe7d3faa642


///
users.pug
===
extends layout

block content
  h1= title
  p File upload
  
  form(action='/users/upload' method='post' enctype='multipart/form-data')
    input(type='file' name='profile')
    button(type='submit') Upload



======





